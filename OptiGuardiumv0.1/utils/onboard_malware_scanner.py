import os
import hashlib
import tkinter as tk
from tkinter import ttk, filedialog
from datetime import datetime

class MalwareScanner:
    def __init__(self, malware_hash_file, callback_output_malware):
        self.malware_hash_file = malware_hash_file
        self.callback_output_malware = callback_output_malware
        self.malware_hashes = self.load_malware_hashes()
        self.log_file = None

    def load_malware_hashes(self):
        """Load malware hashes from a text file."""
        try:
            with open(self.malware_hash_file, "r", encoding="utf-8") as file:
                return {line.strip() for line in file}
        except FileNotFoundError:
            self.callback_output_malware(f"Hash file not found: {self.malware_hash_file}")
            return set()

    def get_file_hash(self, file_path):
        """Calculate the hash of a file using SHA256."""
        hash_sha256 = hashlib.sha256()
        try:
            with open(file_path, "rb") as file:
                for chunk in iter(lambda: file.read(4096), b""):
                    hash_sha256.update(chunk)
            return hash_sha256.hexdigest()
        except Exception as e:
            self.callback_output_malware(f"Error reading file {file_path}: {e}\n")
            return None

    def scan_directory(self, directory, progress_bar):
        """Scan all files in a directory for matching malware hashes."""
        self.log_file = f"scan_log_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"

        try:
            with open(self.log_file, "w", encoding="utf-8") as log:
                log.write("Filename, SHA256 Hash, Status\n")

                # Count total files for progress
                total_files = sum(len(files) for _, _, files in os.walk(directory))
                scanned_files = 0

                for root, _, files in os.walk(directory):
                    for file in files:
                        file_path = os.path.join(root, file)

                        try:
                            file_hash = self.get_file_hash(file_path)
                            if file_hash:
                                status = "MALICIOUS" if file_hash in self.malware_hashes else "CLEAN"
                                log.write(f"{file_path}, {file_hash}, {status}\n")
                                self.callback_output_malware(f"{file_path}: {status}\n")
                            else:
                                self.callback_output_malware(f"Failed to hash {file_path}\n")
                        except UnicodeEncodeError as e:
                            self.callback_output_malware(f"Skipped {file_path} due to encoding error: {e}\n")

                        # Update progress bar
                        scanned_files += 1
                        progress_bar["value"] = (scanned_files / total_files) * 100
                        progress_bar.update()

                self.callback_output_malware(f"\nScan completed. Log saved to {self.log_file}\n")
        except Exception as e:
            self.callback_output_malware(f"Error writing log file: {e}\n")

# class MalwareScannerApp:
#     def __init__(self, scanner):
#         self.scanner = scanner
#         self.root = tk.Tk()
#         self.root.title("Malware Scanner")
#         self.directory = None

#     def select_directory(self):
#         self.directory = filedialog.askdirectory(title="Select Directory to Scan")
#         if not self.directory:
#             print("No directory selected. Scan aborted.")

#     def start_scan(self):
#         if not self.directory:
#             print("No directory selected. Please select a directory to scan.")
#             return
#         self.scanner.scan_directory(self.directory, self.progress_bar, self.log_text)

#     def run(self):
#         tk.Label(self.root, text="Scan Log:").pack(pady=5)

#         self.log_text = tk.Text(self.root, height=20, width=80)
#         self.log_text.pack(pady=5)

#         self.progress_bar = ttk.Progressbar(self.root, orient="horizontal", length=400, mode="determinate")
#         self.progress_bar.pack(pady=10)

#         tk.Button(self.root, text="Select Directory", command=self.select_directory).pack(pady=5)
#         tk.Button(self.root, text="Start Scan", command=self.start_scan).pack(pady=5)

#         self.root.mainloop()

if __name__ == "__main__":
    malware_hash_file = "malware_sha256_hashes.txt"
    scanner = MalwareScanner(malware_hash_file)
    # app = MalwareScannerApp(scanner)
    # app.run()
